# -*- coding: UTF-8 -*-

from perceptron import Perceptron 
import matplotlib.pyplot as plt

f = lambda x: x

class LinearUnit(Perceptron):
	def __init__(self,input_num):
		Perceptron.__init__(self,input_num,f)

def get_training_dataset():
	input_vecs = [[5],[3],[8],[1.4],[10.1]]
	labels = [13200,8700,20000,5800,25400]
	return input_vecs,labels

def train_liner_unit():
	lu = LinearUnit(1)
	input_vecs,labels = get_training_dataset()
	lu.train(input_vecs,labels,10,0.01)
	return lu

def plot(linear_unit):
	input_vecs,labels = get_training_dataset()
	fig = plt.figure()
	ax = fig.add_subplot(111)
	ax.scatter(list(map(lambda x:x[0],input_vecs)),labels,c="b",marker="*")
	weights = linear_unit.weights
	bias = linear_unit.bias
	x = range(0,12,1)
	y = list(map(lambda x:weights[0]*x+bias,x))
	ax.plot(x,y)
	plt.show()

if __name__ == "__main__":
	linear_unit = train_liner_unit()
	print(linear_unit)

	print("Work 3.4 years,monthly salary = %.2f" % linear_unit.predict([3.4]))
	print("Work 15 years,monthly salary = %.2f" % linear_unit.predict([15]))
	print("Work 1.5 years,monthly salary = %.2f" % linear_unit.predict([1.5]))
	print("Work 6.3 years,monthly salary = %.2f" % linear_unit.predict([6.3]))
	plot(linear_unit)
